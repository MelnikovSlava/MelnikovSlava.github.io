{"version":3,"sources":["actions/actionTypes.js","constants/consts.js","utils/helpers.js","reducers/weatherReducer.js","reducers/index.js","store/configureStore.js","api/api.js","actions/actions.js","api/apiRequest.js","components/sidebar/cloud/Cloud.jsx","components/sidebar/city-list/add-item/AddItem.jsx","components/sidebar/city-list/city-item/CityItem.jsx","components/sidebar/city-list/CityList.jsx","components/sidebar/Sidebar.jsx","components/weather/Weather.jsx","components/App.jsx","index.js"],"names":["FETCH_CITY","SET_LOADING","SET_ERROR","SET_ACTIVE_CITY","DELETE_CITY","keyCodes","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","error","Error","message","putToLocalStorage","id","value","localStorage","setItem","JSON","stringify","getFromLocalStorage","data","getItem","str","parse","console","tryParce","putCityToLocalStorage","city","name","Object","defineProperty","objectSpread","deleteCityFromLocalStorage","initCityList","OrderedMap","getInitStateCityList","initSelectedCity","size","first","initialState","cityList","selectedCity","isLoading","rootReducer","combineReducers","weatherReducer","state","arguments","length","undefined","action","type","actions","idCity","set","delete","configureStore","preloadedState","composedEnhancers","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","axiosInstance","axios","create","baseURL","params","APPID","lang","units","fetchCity","setLoading","setError","getCityWeather","objParams","defaults","q","result","get","store","dispatch","then","response","status","catch","Cloud","react_default","a","createElement","className","PureComponent","AddItem","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isShowInput","isError","showInput","bind","assertThisInitialized","keyPress","isShow","_this2","setState","event","_this3","target","charCode","content","_this$state","classNames","add-city-input-error","autoFocus","disabled","placeholder","onKeyPress","onBlur","onClick","CityItem","onClickDelete","onDelete","stopPropagation","_this$props","isActive","city-item-active","defaultProps","CityList","selectCity","setActiveCity","deleteCity","_this$props$state$wea","cities","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","push","key","CityItem_CityItem","err","return","AddItem_AddItem","connect","Sidebar","Cloud_Cloud","sidebar_city_list_CityList","Weather","sourceImg","concat","weather","icon","src","alt","main","temp","toFixed","description","App","lat","latitude","lon","longitude","Sidebar_Sidebar","components_weather_Weather","Component","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.a48d7ba0.chunk.js","sourcesContent":["export const FETCH_CITY = \"FETCH_CITY\";\nexport const SET_LOADING = \"SET_LOADING\";\nexport const SET_ERROR = \"SET_ERROR\";\nexport const SET_ACTIVE_CITY = \"SET_ACTIVE_CITY\";\nexport const DELETE_CITY = \"DELETE_CITY\";\n","export const BASE_URL = \"https://api.openweathermap.org\";\nexport const API_KEY = \"1c367c315e828bd9be4d2087067285f1\";\n\nexport const keyCodes = {\n  KEY_DOWN: 40,\n  KEY_UP: 38,\n  KEY_ENTER: 13\n};\n\nexport const CITY_LIST_STORE_ID = \"cityList\";\n","import { OrderedMap } from \"immutable\";\n\nimport { CITY_LIST_STORE_ID } from \"../constants/consts\";\n\nexport const getPosition = new Promise((resolve, reject) => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position.coords),\n      error => reject(new Error(error.message))\n    );\n  } else {\n    reject(new Error(\"Browser does't support geolocation\"));\n  }\n});\n\nexport const tryParce = str => {\n  try {\n    return JSON.parse(str);\n  } catch (error) {\n    console.error('Error parce data! Method: \"tryParce\"', error);\n    return null;\n  }\n};\n\nexport const putToLocalStorage = (id, value) => {\n  localStorage.setItem(id, JSON.stringify(value));\n};\n\nexport const getFromLocalStorage = id => {\n  let data = localStorage.getItem(id);\n\n  return data !== null ? tryParce(data) : null;\n};\n\nexport const getInitStateCityList = () => {\n  const data = getFromLocalStorage(CITY_LIST_STORE_ID);\n\n  return data !== null ? new OrderedMap(data) : new OrderedMap();\n};\n\nexport const putCityToLocalStorage = city => {\n  let data = getFromLocalStorage(CITY_LIST_STORE_ID);\n  const id = city.id + city.name;\n\n  data = data === null ? { [id]: city } : { ...data, [id]: city };\n\n  putToLocalStorage(CITY_LIST_STORE_ID, data);\n};\n\nexport const deleteCityFromLocalStorage = id => {\n  const data = getFromLocalStorage(CITY_LIST_STORE_ID);\n\n  if (data !== null) {\n    delete data[id];\n  }\n\n  putToLocalStorage(CITY_LIST_STORE_ID, data);\n};\n","import * as actions from \"../actions/actionTypes\";\nimport {\n  putCityToLocalStorage,\n  getInitStateCityList,\n  deleteCityFromLocalStorage\n} from \"../utils/helpers\";\n\nconst initCityList = getInitStateCityList();\nconst initSelectedCity =\n  initCityList.size > 0\n    ? initCityList.first().id + initCityList.first().name\n    : null;\n\nconst initialState = {\n  cityList: initCityList,\n  selectedCity: initSelectedCity,\n  isLoading: false,\n  error: null\n};\n\nexport default function weatherReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.FETCH_CITY:\n      const { city } = action;\n      const idCity = city.id + city.name;\n\n      putCityToLocalStorage(city);\n\n      return {\n        ...state,\n        error: null,\n        cityList: state.cityList.set(idCity, city),\n        selectedCity: idCity\n      };\n\n    case actions.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading\n      };\n\n    case actions.SET_ERROR:\n      return {\n        ...state,\n        error: action.error\n      };\n\n    case actions.SET_ACTIVE_CITY:\n      return {\n        ...state,\n        error: null,\n        selectedCity: action.id + action.name\n      };\n\n    case actions.DELETE_CITY:\n      const { id } = action;\n\n      deleteCityFromLocalStorage(id);\n\n      let cityList = state.cityList.delete(id);\n\n      let selectedCity = null;\n\n      if (cityList.size !== 0) {\n        selectedCity =\n          state.selectedCity === id\n            ? cityList.first().id + cityList.first().name\n            : state.selectedCity;\n      }\n\n      return {\n        ...state,\n        cityList,\n        selectedCity\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport weatherReducer from \"./weatherReducer\";\n\nconst rootReducer = combineReducers({\n  weatherReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"../reducers/index\";\n\nconst configureStore = preloadedState => {\n  const composedEnhancers = compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  if (process.env.NODE_ENV !== \"production\" && module.hot) {\n    module.hot.accept(\"../reducers\", () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n};\n\nexport default configureStore();\n","import axios from \"axios\";\n\nimport { BASE_URL, API_KEY } from \"../constants/consts\";\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    APPID: API_KEY,\n    lang: \"en\",\n    units: \"metric\"\n  }\n});\n\nexport { axiosInstance };\n","import * as actions from \"./actionTypes\";\n\nexport const fetchCity = city => {\n  return {\n    type: actions.FETCH_CITY,\n    city\n  };\n};\n\nexport const setLoading = isLoading => {\n  return {\n    type: actions.SET_LOADING,\n    isLoading\n  };\n};\n\nexport const setError = error => {\n  return {\n    type: actions.SET_ERROR,\n    error\n  };\n};\n\nexport const setActiveCity = id => {\n  return {\n    type: actions.SET_ACTIVE_CITY,\n    id\n  };\n};\n\nexport const deleteCity = id => {\n  return {\n    type: actions.DELETE_CITY,\n    id\n  };\n};\n","import { axiosInstance } from \"./api\";\nimport store from \"../store/configureStore\";\nimport * as actions from \"../actions/actions\";\n\nexport function getCityWeather(city = \"\") {\n  const objParams = {\n    params: { ...axiosInstance.defaults.params }\n  };\n\n  if (typeof city === \"string\") {\n    objParams.params.q = city;\n  } else {\n    objParams.params = { ...city, ...objParams.params };\n  }\n\n  const result = axiosInstance.get(\"/data/2.5/weather\", objParams);\n\n  store.dispatch(actions.setLoading(true));\n\n  result\n    .then(response => {\n      if (response.status === 200) {\n        store.dispatch(actions.fetchCity(response.data));\n      }\n\n      store.dispatch(actions.setLoading(false));\n    })\n    .catch(error => {\n      store.dispatch(actions.setError(\"Something wrong! Try again.\"));\n      store.dispatch(actions.setLoading(false));\n    });\n\n  return result;\n}\n","import React, { PureComponent } from \"react\";\n\nimport \"./Cloud.scss\";\n\nexport default class Cloud extends PureComponent {\n  render() {\n    return (\n      <div className=\"cld-container\">\n        <div className=\"cld-circle\" />\n        <div className=\"cld-main\" />\n        <h2 className=\"title\">Weather</h2>\n        <h2 className=\"title-desc\">Now</h2>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport classNames from \"classnames\";\n\nimport { keyCodes } from \"../../../../constants/consts\";\nimport { getCityWeather } from \"../../../../api/apiRequest\";\n\nimport \"./AddItem.scss\";\n\nexport default class AddItem extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isShowInput: false,\n      isError: false,\n      isLoading: false\n    };\n\n    this.showInput = this.showInput.bind(this);\n    this.keyPress = this.keyPress.bind(this);\n  }\n\n  showInput(isShow) {\n    return () => this.setState({ isShowInput: isShow });\n  }\n\n  keyPress(event) {\n    const value = event.target.value;\n\n    if (value === \"\") {\n      return;\n    }\n\n    if (event.charCode === keyCodes.KEY_ENTER) {\n      this.setState({ isLoading: true });\n\n      getCityWeather(value)\n        .then(result => {\n          this.setState({\n            isShowInput: false,\n            isError: false,\n            isLoading: false\n          });\n        })\n        .catch(error => {\n          this.setState({\n            isError: true,\n            isLoading: false\n          });\n        });\n    }\n  }\n\n  render() {\n    let content;\n    const { isShowInput, isError, isLoading } = this.state;\n\n    if (isShowInput) {\n      content = (\n        <input\n          type=\"text\"\n          className={classNames(\"add-city-input\", {\n            \"add-city-input-error\": isError\n          })}\n          autoFocus={true}\n          disabled={isLoading}\n          placeholder=\" Search...\"\n          onKeyPress={this.keyPress}\n          onBlur={this.showInput(false)}\n        />\n      );\n    } else {\n      content = (\n        <button className=\"btn-add-city\" onClick={this.showInput(true)}>\n          + Add city\n        </button>\n      );\n    }\n\n    return <div className=\"add-city-container\">{content}</div>;\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport \"./CityItem.scss\";\n\nexport default class CityItem extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  onClickDelete(event) {\n    const { onDelete } = this.props;\n\n    event.stopPropagation();\n\n    onDelete();\n  }\n\n  render() {\n    const { data, isActive } = this.props;\n\n    return (\n      <div className={classNames(\"city-item\", { \"city-item-active\": isActive })}>\n        <p className=\"city-name\">{data.name}</p>\n        <p className=\"close\" onClick={this.onClickDelete}>\n          &#10006;\n        </p>\n      </div>\n    );\n  }\n}\n\nCityItem.propTypes = {\n  data: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  isActive: PropTypes.bool.isRequired\n};\n\nCityItem.defaultProps = {\n  data: null,\n  onDelete: () => { },\n  isActive: false\n};\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setActiveCity, deleteCity } from \"../../../actions/actions\";\nimport store from \"../../../store/configureStore\";\nimport AddItem from \"./add-item/AddItem\";\nimport CityItem from \"./city-item/CityItem\";\n\nimport \"./CityList.scss\";\n\nclass CityList extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.selectCity = this.selectCity.bind(this);\n  }\n\n  selectCity(id) {\n    return () => store.dispatch(setActiveCity(id));\n  }\n\n  deleteCity(id) {\n    return () => store.dispatch(deleteCity(id));\n  }\n\n  render() {\n    const { cityList, selectedCity } = this.props.state.weatherReducer;\n\n    let cities = [];\n    for (let city of cityList.entries()) {\n      cities.push(\n        <li\n          key={city[0]}\n          className=\"city-list-item\"\n          onClick={this.selectCity(city[0])}\n        >\n          <CityItem\n            data={city[1]}\n            isActive={selectedCity === city[0]}\n            onDelete={this.deleteCity(city[0])}\n          />\n        </li>\n      );\n    }\n\n    return (\n      <div className=\"city-list-wrapper\">\n        <ul className=\"city-list\">{cities}</ul>\n        <AddItem />\n      </div>\n    );\n  }\n}\n\nexport default connect(state => {\n  return { state };\n})(CityList);\n","import React, { PureComponent } from \"react\";\n\nimport Cloud from \"./cloud/Cloud\";\nimport CityList from \"./city-list/CityList\";\n\nimport \"./Sidebar.scss\";\n\nexport default class Sidebar extends PureComponent {\n  render() {\n    return (\n      <div className=\"sidebar-container\">\n        <Cloud />\n        <p>List of cities:</p>\n        <CityList />\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./Weather.scss\";\n\nclass Weather extends PureComponent {\n  render() {\n    let content;\n    const {\n      selectedCity,\n      isLoading,\n      error,\n      cityList\n    } = this.props.state.weatherReducer;\n\n    if (isLoading) {\n      content = <p>Loading</p>;\n\n    } else if (error !== null) {\n      content = <h2>{error}</h2>;\n\n    } else if (cityList.size !== 0) {\n      const city = cityList.get(selectedCity);\n      const sourceImg = `http://openweathermap.org/img/w/${\n        city.weather[0].icon\n        }.png`;\n\n      content = (\n        <div>\n          <img className=\"img\" src={sourceImg} alt=\"weather-icon\" />\n          <h3 className=\"city\">{city.name}</h3>\n          <h1 className=\"temp\">{city.main.temp.toFixed(1) + \"°\"}</h1>\n          <p className=\"description\">{city.weather[0].main}</p>\n          <p className=\"sub-description\">{city.weather[0].description}</p>\n        </div>\n      );\n    } else {\n      content = <h2>Empty</h2>;\n    }\n\n    return <div className=\"weather-container\">{content}</div>;\n  }\n}\n\nexport default connect(state => {\n  return { state };\n})(Weather);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { getPosition } from \"../utils/helpers\";\nimport { getCityWeather } from \"../api/apiRequest\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport Weather from \"./weather/Weather\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n  componentDidMount() {\n    // get current city (default)\n    getPosition\n      .then(result => {\n        getCityWeather({\n          lat: result.latitude,\n          lon: result.longitude\n        });\n      })\n      .catch(error => {\n        getCityWeather(\"Moscow\");\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Sidebar />\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default connect(state => {\n  return { state };\n})(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store/configureStore\";\nimport App from \"./components/App\";\n\nimport \"./styles/index.scss\";\n\nconst renderApp = () =>\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\nif (process.env.NODE_ENV !== \"production\" && module.hot) {\n  module.hot.accept(\"./components/App\", renderApp);\n}\n\nrenderApp();\n"],"sourceRoot":""}